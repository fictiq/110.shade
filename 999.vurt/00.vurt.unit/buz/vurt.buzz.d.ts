export declare const initVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<VurtModel>;
export declare const bundleVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<VurtModel>;
export declare const delayVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => void | VurtModel;
export declare const fetchVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => void;
export declare const unitVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => VurtModel;
export declare const updateVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => VurtModel;
export declare const replaceVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<VurtModel>;
export declare const testCloudVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => void;
export declare const listUnitVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<void>;
export declare const listPivotVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<VurtModel>;
export declare const countVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<VurtModel>;
export declare const containsVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => VurtModel;
export declare const valueVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => VurtModel;
export declare const workVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => VurtModel;
export declare const commitVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<VurtModel>;
export declare const dotVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => VurtModel;
export declare const pivotVurt: (cpy: VurtModel, bal: VurtBit, ste: State) => Promise<VurtModel>;
import { VurtModel } from "../vurt.model";
import VurtBit from "../fce/vurt.bit";
import State from "../../99.core/state";
